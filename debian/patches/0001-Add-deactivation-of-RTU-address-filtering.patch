From e46cab8856ddd8e65feccc72e2ad2aec65df3ef4 Mon Sep 17 00:00:00 2001
From: epsilonrt <epsilonrt@gmail.com>
Date: Wed, 26 Feb 2020 00:19:35 +0100
Subject: [PATCH 1/3] Add deactivation of RTU address filtering

This makes it possible to process on reception all messages in RTU mode.

Signed-off-by: epsilonrt <epsilonrt@gmail.com>
---
 src/modbus-rtu-private.h |  1 +
 src/modbus-rtu.c         | 37 ++++++++++++++++++++++++++++++++++++-
 src/modbus-rtu.h         |  3 +++
 3 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/src/modbus-rtu-private.h b/src/modbus-rtu-private.h
index a1d0473..4beedee 100644
--- a/src/modbus-rtu-private.h
+++ b/src/modbus-rtu-private.h
@@ -71,6 +71,7 @@ typedef struct _modbus_rtu {
 #endif
     /* To handle many slaves on the same link */
     int confirmation_to_ignore;
+    int disable_receive_filter;
 } modbus_rtu_t;
 
 #endif /* MODBUS_RTU_PRIVATE_H */
diff --git a/src/modbus-rtu.c b/src/modbus-rtu.c
index cb2fb50..aaf8292 100644
--- a/src/modbus-rtu.c
+++ b/src/modbus-rtu.c
@@ -362,10 +362,12 @@ static int _modbus_rtu_check_integrity(modbus_t *ctx, uint8_t *msg,
     uint16_t crc_calculated;
     uint16_t crc_received;
     int slave = msg[0];
+    modbus_rtu_t *ctx_rtu = ctx->backend_data;
 
     /* Filter on the Modbus unit identifier (slave) in RTU mode to avoid useless
      * CRC computing. */
-    if (slave != ctx->slave && slave != MODBUS_BROADCAST_ADDRESS) {
+    if (slave != ctx->slave && slave != MODBUS_BROADCAST_ADDRESS && 
+                                    ctx_rtu->disable_receive_filter == FALSE) {
         if (ctx->debug) {
             printf("Request for slave %d ignored (not %d)\n", slave, ctx->slave);
         }
@@ -1104,6 +1106,38 @@ int modbus_rtu_set_rts_delay(modbus_t *ctx, int us)
     }
 }
 
+int modbus_rtu_get_recv_filter(modbus_t *ctx)
+{
+    if (ctx == NULL) {
+        errno = EINVAL;
+        return -1;
+    }
+
+    if (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU) {
+        modbus_rtu_t *ctx_rtu = ctx->backend_data;
+        return (ctx_rtu->disable_receive_filter == FALSE);
+    } 
+    errno = EINVAL;
+    return -1;
+}
+
+int modbus_rtu_set_recv_filter(modbus_t *ctx, int on)
+{
+    if (ctx == NULL) {
+        errno = EINVAL;
+        return -1;
+    }
+
+    if (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU) {
+        modbus_rtu_t *ctx_rtu = ctx->backend_data;
+
+        ctx_rtu->disable_receive_filter = (on == FALSE);
+    }
+    /* Wrong backend specified */
+    errno = EINVAL;
+    return -1;
+}
+
 static void _modbus_rtu_close(modbus_t *ctx)
 {
     /* Restore line settings and close file descriptor in RTU mode */
@@ -1270,6 +1304,7 @@ modbus_t* modbus_new_rtu(const char *device,
 #endif
 
     ctx_rtu->confirmation_to_ignore = FALSE;
+    ctx_rtu->disable_receive_filter = FALSE;
 
     return ctx;
 }
diff --git a/src/modbus-rtu.h b/src/modbus-rtu.h
index 214a888..42a57c4 100644
--- a/src/modbus-rtu.h
+++ b/src/modbus-rtu.h
@@ -37,6 +37,9 @@ MODBUS_API int modbus_rtu_set_custom_rts(modbus_t *ctx, void (*set_rts) (modbus_
 MODBUS_API int modbus_rtu_set_rts_delay(modbus_t *ctx, int us);
 MODBUS_API int modbus_rtu_get_rts_delay(modbus_t *ctx);
 
+MODBUS_API int modbus_rtu_set_recv_filter(modbus_t *ctx, int on);
+MODBUS_API int modbus_rtu_get_recv_filter(modbus_t *ctx);
+
 MODBUS_END_DECLS
 
 #endif /* MODBUS_RTU_H */
-- 
2.11.0

